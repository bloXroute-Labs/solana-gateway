package gateway

import (
	"context"
	"encoding/hex"
	"fmt"
	"strconv"
	"strings"
	"testing"
	"time"
	"unsafe"

	"github.com/bloXroute-Labs/solana-gateway/pkg/cache"
	"github.com/bloXroute-Labs/solana-gateway/pkg/logger"
	"github.com/bloXroute-Labs/solana-gateway/pkg/ofr"
	"github.com/bloXroute-Labs/solana-gateway/pkg/solana"
	"github.com/bloXroute-Labs/solana-gateway/pkg/udp"
	"github.com/stretchr/testify/assert"
)

// go test -bench=. -benchtime 5s
// goos: darwin
// goarch: arm64
// pkg: github.com/bloXroute-Labs/solana-gateway/gateway/internal/bdn
// BenchmarkStringBuilder-8        98966148                78.23 ns/op
// BenchmarkSprintf-8              43882196               137.9 ns/op

const (
	invalidShred             = "0200000031aed1f835cb7b064da1a55f66c511fa215ca68a6efb5b0e427a6f49d280d4ac050000000000000016389c90aac7f312421c4f5789079a7c8a70d09f9ca5b12f54881d7c58b93c4793c0a9849da4cc1479383a3447f9f4d9f857e3b4660c6b44e99c29c37279f905080000002fe45ebfd59ee1b71bbb951ad807b7882342464dda469e75876133d0e39b96f76b073efc9501000019cc3dfc950100009075569f3443b500e88d7ce54052b4d20594858331b9348218f74db4edec8eba520fd28a95f14815280b5b9d63b80b20bbe1e035f14377c96fd01459503d5f99208a113a683c7a07010000000c99b6a75c85596a677e2a1c998aa6a9147f4864d2cc593b326d39a6c2d51249d301d955f432de843a6b6994e7a8cf24cc90985e80b16641cefb35747824051069acd493e962eef8382f817926ec296326247c05ebeb055b5704f97b69ced65812000100010399b6a75c85596a677e2a1c998aa6a9147f4864d2cc593b326d39a6c2d51249d37492f35f9b14211398dd309bb46a5a815531606175e1903406651e9c857c12410761481d357474bb7c4d7624ebd3bdb3d8355e73d11043fc0da3538000000000285d84258a3f622549fb9e93200f3124dba5542fd5c197213056ac167a67a91e010202010094010e000000ba6abb13000000001f011f011e011d011c011b011a0119011801170116011501140113011201110110010f010e010d010c010b010a010901080107010601050704010301020101cf39a2f50504b0e131ff0eea6590af6ae8d9ecc170162ce0cbd856a1d76babda016ea7ee6700000000e31600e4d2da2022b0d8e90c8754d4775dc968209948f826ee1999985491e09761073efc95010000255b0ec27c67b00c1ad68523557dd12df3ac9e34652adc4f4b41fb7e99a5e597a662025af2e1ffb885df59c2397d6295dc32d6968e305544ec346c832bc704060a000000459eb20ccf78d19c69cb834df311bdc6a358784b314d8333b615192030b14439fb1fbb1300000000c21825dd371205e23d96c3b3b7a2b0b03f5edc3f8a8b67f02c11b1ccda7c099d01000000000000002d6abb13000000002e02349c6ee94e76490bb3e2ae1505c0da16d5f2900bf82dc78e6520751c92c229053efc950100000156a4ae5b8a8759e7ec45e76ef2b5189e91228ffbc1f30553197f6229b39bca9a21ddc7324ff4c05bacb3e19c5f1ffa9cb2e93fde0a8f872436c1f45d1f000d00000000915c07f8fa2c46d611316a39518c96cbc7608d68b698e7ae79ce8232a73250130000000005c7a52b401f0000000005c7a52b411f0000000005c7a52b421f0000000005c7a52b4c1f0000000005c7a52b431f0000000005c7a52b441f0000000005c7a52b451f00000000000000000000000000000000000000000000000005c7a52b4b1f5c073efc95010000adc3b261c9b9a5bd1959a5fb028bfc0678547c238c33a51a32a4b4f9fbf6d0641972899ee8ddcd6e9a4f663bceb427f986ceb3c30d1114d403334571dac727cdf7040b000000915c07f8fa2c46d611316a39518c96cbc7608d68b698e7ae79ce8232a7325013dc8ef8e1df3255ebe54a10300600adc302010e0000000045d5fdc203010000000005c7a52b0a0000c03e0a00010b000105000106000109000108000407000104000101000100b478fb5c7adb21ffdd5c33524422dc172ae168a9cb532f"
	validMerkleData1203Shred = "5d792e8181ba8aa50914e3650c204e14f427c98997282674df79899462227b1c1ea799010e0e3b9447524c532b8e9f0a5eae89046b9d7ef66f4e6479dd37b60d96b9d03f140000000058020000adc34b0200000100161b04a97743e0fbd272fc4b3e8271b99caa042e169a345fc1dd6873c684cce5ad65cdfadfc147f72f59844218d4f32cd7e4f8100e4db73b9257a31004ad061c200375ccd54312158f6c21c98e6abf24f4550fe24dd3ababe573af48628ad74a90c1683b768e83e9ac6137c9821eff387c23648a0306466fe5211732ffecadba72c39be7bc8ce5bbc5f7126b2c439b3a40000000bb8ab32a28946033cd12454e99d6c8fd15838cd5141ae184076355e20946bd377ed9600f8acca26f2086078a8dccc6734a50352c139432cb0c0b593eaac088751431af9ac156612e14a395a97bfbf6424c702fdb74f89701028f39847dc0d124030d000502323b06000d00090315830000000000000e1e0100101102010304051212130f0607080903010f130a001212140b0c15160f0602000000040901000000000000000160969b93934a7671e3701e2de39e15c43bef1a1eeee417377484135e777d14ae0007763e12150e166eb7050000000000006a561021f0e90edb91dac63eee83cb0598e99fc4080d31890cd63490b1145f410100000000000000012f63b1642061b36f6b2d594873bd3b8a75df3fe4dfa5a659707047495ab4b7aabdea6631adafb79ff40225980dc649331f389810763aabec4a97d82ca0d0ab0c0100010308a82bb0d9b2dedd214281708f2c8cb7938bb1030228e7a197b12effb440cdaa08a82bb0b6c740254d453cf7d4d4303ee72263aab957517cd3db4cfeeb83bb570761481d357474bb7c4d7624ebd3bdb3d8355e73d11043fc0da3538000000000c743bb146737cecd8d6c6af029788a79238c24b19d7081670e4d53d03b5c3c1a010202010094010e00000099d03f14000000001f011f011e011d011c011b011a0119011801170116011501140113011201110110010f010e010d010c010b010a010901080107010601050104010301020101c4b2c951042c5adbbea26ca3067d93e9dab8d06899a6c70cf5555064cdb9247001b121236800000000f25bef62d920cebb0c32a7b1aaa16d141c76aabbe8ce05879cd6bb16da00b565b50900000000000051db23a07251a5e01282016518d72191b79ff8300951f82f0718355d405c346d010000000000000001113b88055736ef9801acc4875c3ea325de5c9e5b5f01ef12ee27ffcc4d0d75e1907997d752aec167ebc93960505d982ddce72adb66fc45af55042e4e7650e6048001000207a82e66e157ed86deb133a343cafaf5160460e86137735ab0da64939d85589af32ee93db624d235cdf16845e683a151dd05973e29340b4599aec92ed2334d1963d463ce4f7cbb504320ed1cc3ee22684b0da8ced4b37fae124196560129bce4eaf33132ef9ad79cc75d43106d70a003c495fe4273fa00ad60647d50d00918855fc4713202ac5ec8a03941cababa7e370885399d688ee656e1b3cb24b79f3a3342c471e690738d02e89f7c74cbed03d5a5911ee62b3fe1124337a21c6f8ba1e52a05c96ed93f30d59bb59d45a7e85f524f5c26be177ba9be8d892b5333b0da479cf4943ed6c4af37b07c1672cc019ce605b827af90e1"
	validMerkleCode1228Shred = "96b849e84b5036a6a109c43679ccf63268f4378797f23c708c5b491899d78fc88e5ca057885e76a8514327a6ee795a5551ad8190a9f695988dfe1fe2d9ca3d096751d13f1400000000fe020000adc3fb0200002500250003009751d13f1400000000da9a0000adc3fb0200000100f75770a8e939e422cdae342404930ac147cbbb3fd183e93fb53b5b3da2ae4d879b453909737a2c9b8bc2d3ccce4c91940f0a9c2d2cad10d1e9c9049db92b4f0b5034635bb77e2c97e2427fd7e9b77b4e30d389bd82c589a1b918f84721c2fb15b597be51d450066082a5c552baba5ffcf1a78faa4cc45e288d001207f1bfba27c24b4cba65df129b8b4b23c5f144c857be039afe20945df26f483db652488934d8565594aff737e8283dec959596bc9aae45af7965b5cc9917047c241554198b5dfaa044c912719e5cebcd17bd0cf723545466fdd80a9cf9395eb8d4c2b6c8d72648857969dfeebc12c4f3a93a04441128709bf049e4f70e1586389a313a77ecbacc4424d3f843646811095fe243227a8662e265bc615d613d8b0f3e2c14a0ccab879d2a90ad1b0f87cb22a492d4703bcd19e6fecfa97930abfc2665e7ace0bbde7321ada2cc9cae643475ef3ec6a34e64bc0d3fe37be6fe1f2f9f984c89649227229e8038ccd38961b9895ee33e4381c84371c07eeaf0598ae884d250d745708653b82016b3258c0ad34c1ca23cb622d614ea558503907f3b897adb0a40a68128601610b0a7a6ec94a695b725da420a1b3900b013c1c7202c4b2a9b0b6eb6be8d98f5a7d5daad61aa9f7e3d2186ffd018ac02c3fa5d4325796842373c442645df758976db29708a9d2c40c10aa88c85661c1bdf34745add8f790067e92dd09b165885f07de0a81d90f0dd79c2e48d553581a05c2df2fb9cc3b0e01544b7f1781e841441db114d9fb36071936666193fe7cdb758b6ead1f0210869bfc8385ac40c28aaf628d93032644b5b555ea3693ae3b10f66a58de73d6a77a6ffffc1349370d3ed04cc8aeeb3d52ec36995b070bd8366c747eea046cdb913e731915a03a8d15f6d17bb014202bfc61ed92126297342dc89a7ad3a926a7113b3b8a6437325c8b15c130d4df802566431ca5fc67c240c2c76e46f65dd0b3d424c0f0a4d901f410169feb8f4ea91084f62bae144d928311c34067ad4377d9577b03eded6dd2c886dd07187d82ef6b7f2161036b4095cb0c15eed7b02da60806e1a2953aea68c627086ffd460ee228359489ece5225445c8db6cf627a904a966b7e85d9d703f7ef09861c525de4e52cc29c1493f49cefb70e727dc529bba9b8a0c08ae580923746552d4f01710ae8087c44d76d9c5fa9cf87f6e1118c8fa9efb91366cf16c4c4249c31dafa1bfb3b1ea4940a02689f4b8a9c51dfb80a59b17c7e4315a5f39e7d580d8acd962ba57caca04f8866e1e8c03960b07856108ef68054714ba3cf02be989b7f67be4773a03ee42903227b249ace8368f9a10b80b92e4633ac9e1be373aa314200a399d0d3a9ff9396524fa8c3a7ad6235391569b5ad2bfdc38193803f5c7283bc28e968a19ae51744193b4814f98bf3f8c8911eb745d07ecfdbce139efb113d7d0db6a9e27320819d7b9f01fcd3fc3d725de931c6c7de02a931521316a50a558639d251acc5f94521e211c2376e12b86fa0360da75f3ed3b52b63e553636a63260ef4ec667a184a03dcb78826694a0b60ee30b227639ea51bce26"
)

func TestProcessShred(t *testing.T) {
	lg, _, _ := logger.New(&logger.Config{})
	sockAddr, err := udp.SockAddrFromUDPString("localhost:123")
	assert.NoError(t, err)

	addr, err := udp.NewAddr(sockAddr)
	assert.NoError(t, err)
	serverFd, err := udp.Server(123)
	assert.NoError(t, err)
	gw := Gateway{
		ctx:             context.Background(),
		lg:              lg,
		serverFd:        serverFd,
		noTrafficTicker: time.NewTicker(noTrafficThreshold),
		stats:           ofr.NewStats(lg, time.Minute),
		cache:           cache.NewAlterKey(time.Second * 5),
		ofrUDPAddr:      addr,
	}
	channel := make(chan shredData, 1e5)

	tests := []struct {
		name               string
		hexInput           string
		expectedPutBack    bool
		expectedChannelLen int
		expectedShredSize  int
		expectedVariant    string
	}{
		{
			name:               "valid MerkleDataChained shred (1203 bytes)",
			hexInput:           validMerkleData1203Shred,
			expectedPutBack:    false,
			expectedChannelLen: 1,
			expectedShredSize:  1203,
			expectedVariant:    "MerkleDataChained",
		},
		{
			name:               "valid MerkleCodeChained shred (1228 bytes)",
			hexInput:           validMerkleCode1228Shred,
			expectedPutBack:    false,
			expectedChannelLen: 1,
			expectedShredSize:  1228,
			expectedVariant:    "MerkleCodeChained",
		},
		{
			name:               "invalid shred",
			hexInput:           invalidShred,
			expectedPutBack:    true,
			expectedChannelLen: 0,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			data, err := hex.DecodeString(tt.hexInput)
			assert.NoError(t, err)

			err = gw.serverFd.UnsafeWrite(data, addr.SockAddr)
			assert.NoError(t, err)

			gw.processShred(1, channel)

			assert.Equal(t, tt.expectedChannelLen, len(channel))

			if tt.expectedChannelLen > 0 {
				shred := <-channel
				assert.Equal(t, tt.expectedShredSize, shred.packet.length)
				assert.Equal(t, tt.expectedVariant, shred.shred.Variant.VariantString)
			}
		})
	}
}

func BenchmarkBufferBuilder(b *testing.B) {
	var slot uint64 = 413783688
	var index uint32 = 1022
	typ := solana.MerkleCode

	b.ResetTimer()

	for n := 0; n < b.N; n++ {
		buf := make([]byte, 0, 13)
		buf = strconv.AppendInt(buf, int64(slot), 10)
		buf = strconv.AppendInt(buf, int64(index), 10)
		buf = append(buf, typ)
		_ = unsafe.String(unsafe.SliceData(buf), len(buf))
	}
}

func BenchmarkStringBuilder(b *testing.B) {
	var slot uint64 = 413783688
	var index uint32 = 1022
	typ := "Code"

	b.ResetTimer()

	for n := 0; n < b.N; n++ {
		var buffer strings.Builder
		buffer.WriteString(strconv.Itoa(int(slot)))
		buffer.WriteString(strconv.Itoa(int(index)))
		buffer.WriteString(typ)
		_ = buffer.String()
	}
}

func BenchmarkSprintf(b *testing.B) {
	var slot uint64 = 413783688
	var index uint32 = 1022
	typ := "Code"

	b.ResetTimer()

	for n := 0; n < b.N; n++ {
		_ = fmt.Sprintf("%d:%d:%s", slot, index, typ)
	}
}
