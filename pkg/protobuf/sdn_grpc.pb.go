// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SDNClient is the client API for SDN service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SDNClient interface {
	StreamRelayConnections(ctx context.Context, opts ...grpc.CallOption) (SDN_StreamRelayConnectionsClient, error)
}

type sDNClient struct {
	cc grpc.ClientConnInterface
}

func NewSDNClient(cc grpc.ClientConnInterface) SDNClient {
	return &sDNClient{cc}
}

func (c *sDNClient) StreamRelayConnections(ctx context.Context, opts ...grpc.CallOption) (SDN_StreamRelayConnectionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &SDN_ServiceDesc.Streams[0], "/sdn.SDN/StreamRelayConnections", opts...)
	if err != nil {
		return nil, err
	}
	x := &sDNStreamRelayConnectionsClient{stream}
	return x, nil
}

type SDN_StreamRelayConnectionsClient interface {
	Send(*RelayEvent) error
	Recv() (*RelayEventResponse, error)
	grpc.ClientStream
}

type sDNStreamRelayConnectionsClient struct {
	grpc.ClientStream
}

func (x *sDNStreamRelayConnectionsClient) Send(m *RelayEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sDNStreamRelayConnectionsClient) Recv() (*RelayEventResponse, error) {
	m := new(RelayEventResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SDNServer is the server API for SDN service.
// All implementations must embed UnimplementedSDNServer
// for forward compatibility
type SDNServer interface {
	StreamRelayConnections(SDN_StreamRelayConnectionsServer) error
	mustEmbedUnimplementedSDNServer()
}

// UnimplementedSDNServer must be embedded to have forward compatible implementations.
type UnimplementedSDNServer struct {
}

func (UnimplementedSDNServer) StreamRelayConnections(SDN_StreamRelayConnectionsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamRelayConnections not implemented")
}
func (UnimplementedSDNServer) mustEmbedUnimplementedSDNServer() {}

// UnsafeSDNServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SDNServer will
// result in compilation errors.
type UnsafeSDNServer interface {
	mustEmbedUnimplementedSDNServer()
}

func RegisterSDNServer(s grpc.ServiceRegistrar, srv SDNServer) {
	s.RegisterService(&SDN_ServiceDesc, srv)
}

func _SDN_StreamRelayConnections_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SDNServer).StreamRelayConnections(&sDNStreamRelayConnectionsServer{stream})
}

type SDN_StreamRelayConnectionsServer interface {
	Send(*RelayEventResponse) error
	Recv() (*RelayEvent, error)
	grpc.ServerStream
}

type sDNStreamRelayConnectionsServer struct {
	grpc.ServerStream
}

func (x *sDNStreamRelayConnectionsServer) Send(m *RelayEventResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sDNStreamRelayConnectionsServer) Recv() (*RelayEvent, error) {
	m := new(RelayEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SDN_ServiceDesc is the grpc.ServiceDesc for SDN service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SDN_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sdn.SDN",
	HandlerType: (*SDNServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamRelayConnections",
			Handler:       _SDN_StreamRelayConnections_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "sdn.proto",
}
